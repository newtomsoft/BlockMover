@page "/counter"
@using BlockMover.Blazor.Components
@using BlockMover.Blazor.Models
@using BlockMover.Domain
@using Microsoft.AspNetCore.Components

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>


<input type="number" @bind="Size" />

<EditForm class="form-signin" OnValidSubmit="AddBlock" Model="BlockModel">
    <DataAnnotationsValidator />
    <h4 class="font-weight-normal text-center">block</h4>

    <label for="inputLength" class="sr-only">size</label>
    <InputNumber id="inputLength" class="form-control" placeholder="2" @bind-Value="BlockModel.Length" autofocus />
    <ValidationMessage id="validationLength" For="@(() => BlockModel.Length)" />

    <div class="form-group">
        <label for="inputOrientation" class="sr-only">Orientation</label>
        <InputSelect @bind-Value="@BlockModel.Orientation">
            @foreach (var orientation in Enum.GetValues(typeof(Orientation)))
            {
                <option value="@orientation">@orientation</option>
            }
        </InputSelect>
        <ValidationMessage id="inputOrientation" For="@(() => BlockModel.Orientation)" />
    </div>

    <label for="inputX" class="sr-only">x</label>
    <InputNumber id="inputX" class="form-control" placeholder="0" @bind-Value="BlockModel.X" />
    <ValidationMessage id="validationX" For="@(() => BlockModel.X)" />

    <label for="inputY" class="sr-only">y</label>
    <InputNumber id="inputY" class="form-control" placeholder="0" @bind-Value="BlockModel.Y" />
    <ValidationMessage id="validationY" For="@(() => BlockModel.Y)" />


    <button id="btnSignIn" class="btn btn-lg btn-primary btn-block" type="submit">Ok</button>

</EditForm>


<GridComponent Size="Size" Grid="Grid"></GridComponent>


<button @onclick="ComputeWay">Compute way</button>
<input @bind="Way"/>


@code {

    private int _size = 6;
    private int Size
    {
        get => _size;
        set
        {
            _size = value;
            Grid.ChangeSize(GridSize.From(value));
        }
    }

    private void AddBlock()
    {
        var block = new Block(BlockModel.Length, BlockModel.Orientation, Coordinate.From(BlockModel.X, BlockModel.Y));
        Grid.AddBlock(block);
    }

    private BlockModel BlockModel { get; set; } = new();



    private Grid Grid;


    protected override Task OnInitializedAsync()
    {
        Grid = new Grid(new GridSize(Size, Size), new List<Block>());
        return base.OnInitializedAsync();
    }

    private void ComputeWay()
    {
        var node = new Node(Grid);
        Way = node.GetStringWayToExit();
    }

    public string Way { get; set; }

}
